rule aws_privilege_escalation_using_iam_login_profile {

  meta:
    author = "Google Cloud Security"
    description = "Detect when a user creates or updates a login profile for another user and escalates privileges using this new user from the same IP."
    mitre_attack_tactic = "Persistence"
    mitre_attack_technique = "Cloud Account"
    mitre_attack_url = "https://attack.mitre.org/techniques/T1136/003/"
    mitre_attack_version = "v13.1"
    type = "Alert"
    data_source = "AWS CloudTrail"
    platform = "AWS"
    severity = "Low"
    priority = "Low"

  events:
    $profile.metadata.base_labels.namespaces = "LogStory"
    $login.metadata.base_labels.namespaces = "LogStory"
    $profile.metadata.base_labels.namespaces = "LogStory"
    $login.metadata.base_labels.namespaces = "LogStory"
    $profile.metadata.vendor_name = "AMAZON"
    $profile.metadata.product_name = "AWS CloudTrail"
    $profile.metadata.product_event_type = "CreateLoginProfile" or $profile.metadata.product_event_type = "UpdateLoginProfile"
    $profile.security_result.action= "ALLOW"
    $profile.principal.user.userid = $p_userid
    $profile.target.user.userid = $t_userid

    $login.metadata.vendor_name = "AMAZON"
    $login.metadata.product_name = "AWS CloudTrail"
    $login.metadata.event_type = "USER_LOGIN"
    $login.metadata.product_event_type = "ConsoleLogin"
    $login.security_result.action= "ALLOW"

    //Same IP address
    $login.principal.ip = $profile.principal.ip

    //User created and logged in
    $profile.principal.user.user_display_name != $profile.target.user.userid
    $login.target.user.user_display_name = $profile.target.user.userid

    $profile.metadata.event_timestamp.seconds < $login.metadata.event_timestamp.seconds

  match:
    $p_userid over 1h

  outcome:
    $risk_score = max(35)
    $mitre_attack_tactic = "Persistence"
    $mitre_attack_technique = "Cloud Account"
    $mitre_attack_technique_id = "T1136.003"
    $event_count = count_distinct($login.metadata.id)
    $network_http_user_agent = array_distinct($login.network.http.user_agent)
    $principal_ip = array_distinct($login.principal.ip)
    $principal_ip_country = array_distinct($login.principal.ip_geo_artifact.location.country_or_region)
    $principal_ip_state = array_distinct($login.principal.ip_geo_artifact.location.state)
    $principal_user_display_name = array_distinct($login.principal.user.user_display_name)
    $dc_principal_user_display_name = count_distinct($login.principal.user.user_display_name)
    $is_mfa_used = array_distinct($login.principal.user.attribute.labels["mfaAuthenticated"])
    $target_resource_name = array_distinct($login.target.resource.name)
    $target_resource_product_object_id = array_distinct($login.target.resource.product_object_id)

  condition:
    $profile and $login
}
